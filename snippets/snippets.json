{
  "cli-command-help-": "w3 version 0.0.1-prealpha.76\n\n  w3             ðŸ”¥ Web3API CLI ðŸ”¥                       \n  help (h)       -                                     \n  test-env (t)   Manage a test environment for Web3API \n  query (q)      Query Web3APIs using recipe scripts   \n  plugin (p)     Build/generate types for the plugin   \n  deploy (b)     Deploys/Publishes a Web3API           \n  create (c)     Create a new project with w3 CLI      \n  codegen (g)    Auto-generate API Types               \n  build (b)      Builds a Web3API                      \n  app (a)        Build/generate types for your app",
  "cli-command-help-app": "w3 app command [options]\n\nCommands:\n  codegen   Generate code for the app\n\nOptions:\n  -h, --help                              Show usage information\n  -m, --manifest-file <path>              Path to the Web3API App manifest file (default: web3api.app.yaml | web3api.app.yml)\n  -c, --codegen-dir <path>                 Output directory for the generated code (default: ./src/w3)\n  -i, --ipfs [<node>]                     IPFS node to load external schemas (default: ipfs.io & localhost)\n  -e, --ens [<address>]                   ENS address to lookup external schemas (default: 0x0000...2e1e)",
  "cli-command-help-build": "w3 build [options]\n\nOptions:\n  -h, --help                         Show usage information\n  -m, --manifest-file <path>         Path to the Web3API Build manifest file (default: web3api.yaml | web3api.yml)\n  -o, --output-dir <path>            Output directory for build results (default: build/)\n  -w, --watch                        Automatically rebuild when changes are made (default: false)\n  -v, --verbose                      Verbose output (default: false)",
  "cli-command-help-codegen": "w3 codegen [options]\n\nOptions:\n  -h, --help                              Show usage information\n  -m, --manifest-file <path>              Path to the Web3API manifest file (default: web3api.yaml | web3api.yml)\n  -c, --codegen-dir <path>                Output directory for the generated code (default: ./w3)\n  -s, --script <path>                     Path to a custom generation script (JavaScript | TypeScript)\n  -i, --ipfs [<node>]                     IPFS node to load external schemas (default: ipfs.io & localhost)\n  -e, --ens [<address>]                   ENS address to lookup external schemas (default: 0x0000...2e1e)",
  "cli-command-help-create": "w3 create command <project-name> [options]\n\nCommands:\n  api <lang>     Create a Web3API project\n    langs: assemblyscript, interface\n  app <lang>     Create a Web3API application\n    langs: typescript-node, typescript-react\n  plugin <lang>  Create a Web3API plugin\n    langs: typescript\n\nOptions:\n  -h, --help               Show usage information\n  -o, --output-dir <path>  Output directory for the new project",
  "cli-command-help-deploy": "w3 deploy [options]\n\nOptions:\n  -h, --help                         Show usage information\n  -m, --manifest-file <path>         Path to the Web3API Deploy manifest file (default: web3api.yaml | web3api.yml)\n  -v, --verbose                      Verbose output (default: false)",
  "cli-command-help-plugin": "w3 plugin command [options]\n\nCommands:\n  codegen   Generate code for the plugin\n\nOptions:\n  -h, --help                       Show usage information\n  -m, --manifest-file <path>       Path to the Web3API Plugin manifest file (default: web3api.plugin.yaml | web3api.plugin.yml)\n  -p, --publish-dir <path>  Output path for the built schema and manifest (default: ./build)\n  -c, --codegen-dir <path>    Output directory for the generated types (default: ./src/w3)\n  -i, --ipfs [<node>]              IPFS node to load external schemas (default: dev-server's node)\n  -e, --ens [<address>]            ENS address to lookup external schemas (default: 0x0000...2e1e)",
  "cli-command-help-query": "w3 query [options] <recipe-script>\n\nOptions:\n  -h, --help                         Show usage information\n  -t, --test-ens                     Use the development server's ENS instance\n  -c, --client-config <config-path>  Add custom configuration to the Web3ApiClient\n  -o, --output-file                  Output file path for the query result\n  -q, --quiet                        Suppress output",
  "cli-command-help-test-env": "w3 test-env command\n\nCommands:\n  up    Startup the test env\n  down  Shutdown the test env\n\nOptions:\n  -h, --help          Show usage information",
  "js-import-client": "import { Web3ApiClient } from \"@web3api/client-js\";",
  "js-client-query": "async function main() {\n  // Simply instantiate the Web3ApiClient.\n  const client = new Web3ApiClient();\n\n  // ...And then you'll be able to use the `query`\n  // method to send GraphQL requests to any Web3API\n  // that's located at the specified URI.\n  const result = await client.query({\n    uri: 'api.example.eth',\n    query: `query {\n      doSomething(\n        variable: $variable\n        value: \"important value\"\n      ) {\n        returnData\n      }\n    }`,\n    variables: {\n      variable: 555,\n    },\n  });\n}",
  "js-create-client-instance": "import { Web3ApiClient } from \"@web3api/client-js\";\n\nconst client = new Web3ApiClient();",
  "js-client-hello-world": "client.invoke({\n  uri: \"ens/api.helloworld.web3api.eth\",\n  module: \"query\",\n  method: \"logMessage\",\n  input: {\n    message: \"Hello World!\"\n  }\n});",
  "js-metamask-provider": "import { Web3ApiClient } from \"@web3api/client-js\";\nimport { ethereumPlugin } from '@web3api/ethereum-plugin-js';\n\n// Enable Metamask\nconst ethereum = (window as any).ethereum;\nawait ethereum.request({\n  method: 'eth_requestAccounts',\n});\n\n// Configure the Ethereum plugin w/ MetaMask\nconst client = new Web3ApiClient({\n  plugins: [{\n    uri: \"ens/ethereum.web3api.eth\",\n    plugin: ethereumPlugin({\n      networks: {\n        mainnet: {\n          provider: ethereum\n        }\n      },\n      // If defaultNetwork is not specified, mainnet will be used.\n      defaultNetwork: \"mainnet\"\n    })\n  }]\n});",
  "js-understanding-redirects": "const client = new Web3ApiClient({\n  redirects: [\n    {\n      from: `ens/api.helloworld.polywrap.eth`,\n      to: `ens/api.myhelloworld.eth`,\n    },\n  ],\n});",
  "js-react-provider": "import React from 'react';\nimport { Web3ApiProvider } from '@web3api/react';\n\nexport const App: React.FC = () => {\n  return (\n    <Web3ApiProvider>\n        <HelloWorld />\n    </Web3ApiProvider>\n  );\n};",
  "js-react-provider-empty-redirects": "<Web3ApiProvider redirects={ [] }/>",
  "js-react-custom-provider": "import { createWeb3ApiProvider } from '@web3api/react';\n\nconst CustomWeb3ApiProvider = createWeb3ApiProvider('custom');\n\nexport const CustomProvider = ({ children }: { children: JSX.Element }) => {\n  return (\n    <CustomWeb3ApiProvider>\n      {children}\n    </CustomWeb3ApiProvider>\n  );\n};",
  "js-react-useWeb3ApiQuery": "const { execute, data, errors, loading } = useWeb3ApiQuery({\n  uri: 'ens/api.helloworld.polywrap.eth',\n  query: `{\n    logMessage(message: \"Hello World!\")\n  }`,\n});",
  "js-react-useWeb3ApiQuery-custom-provider": "const { execute, data, errors, loading } = useWeb3ApiQuery({\n  provider: \"custom\",\n  uri: 'ens/api.helloworld.polywrap.eth',\n  query: `{\n    logMessage(message: \"Hello World!\")\n  }`,\n});",
  "js-react-useWeb3ApiInvoke": "const { execute, data, error, loading } = useWeb3ApiInvoke({\n  uri: 'ens/api.helloworld.polywrap.eth',\n  module: \"query\",\n  method: \"logMessage\",\n  input: {\n    message: \"Hello World!\",\n  },\n});",
  "js-react-useWeb3ApiClient": "const client = useWeb3ApiClient();"
}